// <auto-generated />
using System;
using DeliveryCRM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DeliveryCRM.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211019085420_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DeliveryCRM.Entities.CarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("NumberCar")
                        .HasColumnType("text");

                    b.Property<int>("TypeCargoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.DriverEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DriverEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("IdCar")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Passport")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DriverEntityId");

                    b.HasIndex("RoleId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.ManagerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("ManagerEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerEntityId");

                    b.HasIndex("RoleId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdministratorEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateDelivery")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DriverEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("PointFinish")
                        .HasColumnType("text");

                    b.Property<string>("PointStart")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("StatusOrderEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserEntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorEntityId");

                    b.HasIndex("DriverEntityId");

                    b.HasIndex("StatusOrderEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "client"
                        });
                });

            modelBuilder.Entity("DeliveryCRM.Entities.StatusOrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("StatusOrderEntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusOrderEntityId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.TypeCargoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoryCargo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypesCargo");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NumberPhone")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@mail.ru",
                            Name = "Tom",
                            Password = "123456",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "client@mail.ru",
                            Name = "Alice",
                            Password = "123456",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("DeliveryCRM.Entities.DriverEntity", b =>
                {
                    b.HasOne("DeliveryCRM.Entities.DriverEntity", null)
                        .WithMany("DriverEntities")
                        .HasForeignKey("DriverEntityId");

                    b.HasOne("DeliveryCRM.Entities.RoleEntity", "Role")
                        .WithMany("Drivers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.ManagerEntity", b =>
                {
                    b.HasOne("DeliveryCRM.Entities.ManagerEntity", null)
                        .WithMany("administratorEntities")
                        .HasForeignKey("ManagerEntityId");

                    b.HasOne("DeliveryCRM.Entities.RoleEntity", "Role")
                        .WithMany("Managers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.OrderEntity", b =>
                {
                    b.HasOne("DeliveryCRM.Entities.ManagerEntity", "AdministratorEntity")
                        .WithMany()
                        .HasForeignKey("AdministratorEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryCRM.Entities.DriverEntity", "DriverEntity")
                        .WithMany()
                        .HasForeignKey("DriverEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryCRM.Entities.StatusOrderEntity", "StatusOrderEntity")
                        .WithMany()
                        .HasForeignKey("StatusOrderEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryCRM.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdministratorEntity");

                    b.Navigation("DriverEntity");

                    b.Navigation("StatusOrderEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.StatusOrderEntity", b =>
                {
                    b.HasOne("DeliveryCRM.Entities.StatusOrderEntity", null)
                        .WithMany("statusOrderEntities")
                        .HasForeignKey("StatusOrderEntityId");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.UserEntity", b =>
                {
                    b.HasOne("DeliveryCRM.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryCRM.Entities.UserEntity", null)
                        .WithMany("userEntities")
                        .HasForeignKey("UserEntityId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.DriverEntity", b =>
                {
                    b.Navigation("DriverEntities");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.ManagerEntity", b =>
                {
                    b.Navigation("administratorEntities");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.RoleEntity", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Managers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.StatusOrderEntity", b =>
                {
                    b.Navigation("statusOrderEntities");
                });

            modelBuilder.Entity("DeliveryCRM.Entities.UserEntity", b =>
                {
                    b.Navigation("userEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
